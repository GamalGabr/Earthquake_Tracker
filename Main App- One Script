
  #call prerequisite libraries
library("DT")
library("dplyr")
library("shinydashboard")
library("leaflet")
library("ECharts2Shiny")
library("echarts4r")
library(RMySQL)
library(data.table)
library(thematic)
library(bslib)
library(shiny)
library(shinyjs)
library(shinyWidgets)
library(dplyr)
library(lubridate)


#define design layout
my_css <- "


#loadmessage {
font-size: 20px;
color: #FFD166
text-decoration: underline;
}  


.control-label { 
   
    color: #A57C00;
   
}

.leaflet-popup-content-wrapper {
    background:  #39FF14;
    color: #ffffff;
        padding: 2px;
    border-radius: 0px;
}






.partner {
  display:none;
}

.fontStuff {
  font-size: 65px; 
  text-transform: uppercase;
} 




.navbar { background-color:#36393B ;
                       font-family: Antic;
                       font-size: 15px;
                       color: #FFD166  ; }


@import url('https://fonts.googleapis.com/css?family=Assistant');
@import url('https://fonts.googleapis.com/css?family=Antic');
@import url('https://fonts.googleapis.com/css?family=Khula');


#box2{
width: 250px;
height: 300px;
background:#ff0;
border-radius:100px 300px 300px 400px}



#rcorners1 {
  border-radius: 25px;
  background: #73AD21;
  padding: 20px; 
  width: 200px;
  height: 150px;  
}





.well {
      height: 140px;
      width: 500px;
     
    }
    
    
    @keyframes animationFrames{
      0% {
        background-color: #FFD700;
      }
      15% {
        background-color: #F0E2B6;
      }
      30% {
        background-color: #FFD700;
      }
      45% {
        background-color: #F0E2B6;
      }
      60% {
        background-color: #FFD700;
      }
      75% {
       background-color: #F0E2B6;
      }
      100% {
        background-color: #FFD700;
      }
    }
    



.custom-popup .leaflet-popup-content-wrapper {
  background: #DB0925;
  color:#fff;
  font-size:20px;
  line-height:24px;
  }
.custom-popup .leaflet-popup-content-wrapper a {
  color:rgba(255,255,255,0.5);
  }
.custom-popup .leaflet-popup-tip-container {
  width:30px;
  height:15px;
  }
.custom-popup .leaflet-popup-tip {
  border-left:15px solid transparent;
  border-right:15px solid transparent;
  border-top:15px solid #2c3e50;
  }







.underlinestyle{
    text-decoration-line: underline;
    
}



#boxStyle{
color:black; 
background-color:#DE4F53; 
margin: 0 3em 0 3em; 
border-radius: .5em; 
height :10vh; color:white; 
align:center; 
text-align:center; 
display: table-cell;
vertical-align: middle;}



div.centre {
  text-align: left;
  width: 200px;
   color: white;
 #background-color: #eee;
  display: block;
  margin-left: auto;
  margin-right: auto;
}



#parent {
  height: 40px;
  white-space: nowrap;
  overflow: hidden;
  font-family: 'Antic', monospace;  
  font-size: 30px;
  color: rgba(255,255,255,.70);
  position: relative;
}

#border {
  border-bottom: solid 3px rgba(0,255,0,.75);
  position: absolute;
  right: -7px;
  width: 20px;
}

/* Animation */
#parent {
  animation: animated-text 2s steps(30,end) 1s 1 normal both
}

#border {
   animation: animated-cursor 600ms steps(30,end) infinite;
}

/* text animation */

@keyframes animated-text{
  from{width: 0;}
  to{width: 480px;}
}

/* cursor animations */

@keyframes animated-cursor{
  from{border-bottom-color: rgba(0,255,0,.75);}
  to{border-bottom-color: transparent;}
}


div.layout {
  text-align: center;
}


html, body{
  height: 100%;
  font-weight: 800;
}

body{
  background: #030321;
  font-family: Khula;
}

#zebra  {
    display: block;
    font: 10.5em 'Antic';
    width: 960px;
    height: 300px;
    margin: 0 auto;
}

.text-copy {
    fill: none;
    stroke: white;
    stroke-dasharray: 6% 29%;
    stroke-width: 5px;
    stroke-dashoffset: 0%;
    animation: stroke-offset 5.5s infinite linear;
}

.text-copy:nth-child(1){
  stroke: #4D163D;
  animation-delay: -1;
}

.text-copy:nth-child(2){
  stroke: #840037;
  animation-delay: -2s;
}

.text-copy:nth-child(3){
  stroke: #BD0034;
  animation-delay: -3s;
}

.text-copy:nth-child(4){
  stroke: #BD0034;
  animation-delay: -4s;
}

.text-copy:nth-child(5){
  stroke: #FDB731;
  animation-delay: -5s;
}

@keyframes stroke-offset{
  100% {stroke-dashoffset: -35%;}
}


.shiny-output-error {color: #1b03a3 }

.shiny-output-error-validation {
    color: #1b03a3
}

hr {border-top: 2px solid #FFD166;}

"

# Create a custom theme
golden_theme <- bslib::bs_theme(
  
  bg = "#36393B", # background colour
  fg = "#FFD166", # most of the text on your app
  primary = "#F26430", # buttons, ...
  
  # you can also choose fonts
  base_font = font_google("Antic"),
  heading_font = font_google("Antic")
)




thematic::thematic_shiny()


#time filter control slider
echart_ui <- function(id) {
  
  ns <- shiny::NS(id)
  
  shiny::tagList(
    
    echarts4rOutput(ns("timeline")),
    br(),
    fluidRow(
      column(4,  
             sliderInput("date_new",
                         label = "SELECT DATES:",
                         value=c(as.POSIXct(Sys.Date()-7, tz = "UTC"),
                                 as.POSIXct(Sys.Date(), tz = "UTC")),
                         min = as.POSIXct(Sys.Date()-7, tz = "UTC"),
                         max = as.POSIXct(Sys.Date(), tz = "UTC"),
                         step = 1,
                         timeFormat="%Y-%m-%d"), offset=4
             
      ))
    
    
  )
  
}




#user interface module for the main map
mapUI <- function(id) {
  # Create a namespace function using the provided id
  ns <- NS(id)
  # Return a piece of UI
  # namespace the id by wrapping it in 'ns()'
  leafletOutput(ns("quake_map"))
}






drawleafletServer<-function(id, quake_data) {
  
  shiny::moduleServer(
    id,
    
    drawleafletServer<-function(input, output, session) {
      
      
      output$quake_map <- renderLeaflet({
        
        df <- quake_data()
        
        # Categorize magnitude in terms of size
        df$size <- cut(df$mag,breaks = c(-1, 3.9, 4.9, 5.9, 6.9, 7.9, 12),
                       labels=c("minor", "light", "moderate", "strong", "major", "great 8+"))
        
        # Create colour pallet
        col_rainbow<- c("#66ffff","#1aff1a","#1F51FF","#FF0000","#b30000","#b30059")
        pallet <- colorFactor(col_rainbow, df$size)
        
        # Create popup in HTML
        pop <- paste(
          "<b>Place:</b>", df$place, "<br>",
          "<b>Time:</b>", df$time, "<br>",   # should make it nicer format
          "<b>Mag:</b>", as.character(df$mag), "<br>",
          "<b>Depth:</b>", as.character(df$depth), "km<br>"
        )
        
        
        ## Leaflet map
        my_map <- 
          
          leaflet(df, options = leafletOptions(minZoom = 2)) %>%
          addProviderTiles(providers$CartoDB.DarkMatter) %>%
          
          setView(100.65, 120.0285, zoom = 1) %>%
          
          setView(24, 10, zoom=1) %>%
          
          addCircles( ~longitude, ~latitude,  
                      
                      weight= ~ifelse(mag < 4, 3, 6),
                      color= ~pallet(size),
                      radius = ~ifelse(mag < 4, 12, 24), # add ifs
                      popup = pop
                      
          )
        
        # Add legend
        my_map <- my_map %>%
          leaflet::addLegend( "bottomright", pal = pallet,
                     values = sort(df$size),
                     title = "Magnitude")
        
        # Return map
        my_map
        
      })
    })
}







# module for presenting data using DT
showDTdataUI <- function(id) {
  ns <- NS(id)
  tagList(
    #DT::dataTableOutput(ns("table"))
    tableOutput(ns("table"))
    )
}





DT_server <- function(id, quake_data3) {  
  
  shiny::moduleServer(
    id,
    
    function(input, output, session) {
      
             
        output$table<-renderTable({
        
        filter_data <- quake_data3()
        
        
        filter_data <- select(filter_data, time, place, magnitude= mag, depth,
                        type)  #miss size
        
        #round numeric variables
        filter_data<-filter_data%>%mutate_if(is.numeric, round, 2)
        
          filter_data<-filter_data%>%filter(!is.na(depth)) %>%
          
            select(time,place,magnitude)%>%   
          
          
          slice(which.max(magnitude))%>% rename(Time = time,
                                                Location = place,
                                                Largest = magnitude)
        
          data.frame(filter_data)
      
        
      })
    })
}







STATS_server <- function(id, quake_data) {
  
  shiny::moduleServer(
    id,
    function(input, output, session) {
      
      
      #Some simple statistics about quakes  
      output$stats_quake <- renderUI({
        
        
        p(strong("Total quakes reported"), br(),
          nrow(quake_data()),
          br(),
          br(),
          
          strong("Strongest quake "), br(),
          max(quake_data()$mag)," magnitude", br(),
          select(filter(quake_data(),mag==max(mag)),place), br(),
          select(filter(quake_data(),mag==max(mag)),time) )
      })
      
    })
  
}  



statsUI <- function(id) {
  # Create a namespace function using the provided id
  ns <- NS(id)
  # Return a piece of UI
  # namespace the id by wrapping it in 'ns()'
  uiOutput(ns("stats_quake"))
}






ECHART_server <- function(id, quake_data2) {  
  
  shiny::moduleServer(
    id,
    
    function(input, output, session) {
      
      
      
      output$timeline <- renderEcharts4r({
        quake_data2() %>%  
          e_charts(time) %>%
          e_bar(mag) %>%
          e_axis_labels(x = "Date",y= "Magnitute") %>% # axis labels
          e_title("Timeline" ) %>%  # Add title
          e_theme("halloween") %>%  # theme
          e_legend(show = FALSE) %>%  # move legend to the bottom
          e_tooltip(trigger = "axis")  %>% #tooltip
          e_visual_map(mag, orient = "horizontal",
                       right = "center",
                       top = 5,
                       textStyle = list(color = "#fff"), scale = NULL)  
        
      }) }
    
  )
  
}



















ui <- fluidPage(  useShinyjs(), #Set up shinyjs
                
  
                 HTML('<meta name="viewport" content="width=1024">'),
                 theme = golden_theme,
                 #set colours of sliders
                 setSliderColor(c(" #b08f26", "#b08f26", "#b08f26"), c(1, 2, 3)),
                 # Add the CSS style to the Shiny app
                 tags$style(my_css),
                 
                 
                 tags$script(HTML("
 
    componentDidUpdate(prevProps, prevState) {
    if (prevState.zoomLevel !== this.state.zoomLevel) {
      if (this.state.zoomLevel <= 0) {
        this.setState({ draggable: false });
      } else {
        this.setState({ draggable: true });
      }
    }
  }

  handleZoomEnd = () => {
    if (this.map && this.map.leafletElement) {
      let zoomLevel = this.map.leafletElement.getZoom();

      this.setState({ zoom: zoomLevel });
    }
  };
    });
")) ,
                 
            
                 tags$script(HTML("
  jQuery(document).ready(function(){
  $('.hellothere').fadeOut(60000,function(){
    $('.partner').fadeIn(10000);
  });
});
    ")),
                 
                 
                 
                 
                 tags$script(HTML(
                   
                   
                   "




 
 
 
 
 
 
 
  "
                 )),
                 
                 
                 navbarPage(
                   "Earthquake Tracker",
                   
                   
                    
                     
                     
                  
                  tabPanel(
                              br(),
                                 
                              
                              
                              
                              #HTML("<div class='centre' id='parent'>Track earthquakes globally.<div id='border'></div></div>"),
                              HTML('<svg id="zebra" viewBox="0 0 960 300">
                                <symbol id="s-text">
                                <text text-anchor="middle" x="50%" y="80%">Tracker</text>
                                </symbol>
                                
                                <g class = "g-ants">
                                <use xlink:href="#s-text" class="text-copy"></use>
                                <use xlink:href="#s-text" class="text-copy"></use>
                                <use xlink:href="#s-text" class="text-copy"></use>
                                <use xlink:href="#s-text" class="text-copy"></use>
                                <use xlink:href="#s-text" class="text-copy"></use>
                                </g>
                                </svg>'),
                            
                   
                   
                   
                   ),
                   tabPanel("Enter",
                            
                            mapUI(id="MAIN_MAP"),
                            
                            br(),
                            fluidRow(
                              column(4,sliderInput("sliderdate",
                                                   label = "SELECT DATES:",
                                                   value=c(as.POSIXct(Sys.Date()-7, tz = "UTC"),
                                                           as.POSIXct(Sys.Date(), tz = "UTC")),
                                                   min = as.POSIXct(Sys.Date()-7, tz = "UTC"),
                                                   max = as.POSIXct(Sys.Date(), tz = "UTC"),
                                                   step = 1,
                                                   timeFormat="%Y-%m-%d"), offset=4)),
                            
                            br(),
                            br(),
                            br(),
                            
                          
                            
                            
                            
                   ),
                   
                  tabPanel("Magnitudes",
                                       
                                       br(),
                                       echart_ui(id="ECHARTIE"),
                                       br(),
                                       #showDTdataUI(id="testDTModule"),#show table of results  
                                       
                                       
                       
                           
                           
                           
                                       br(),
                                       br(),
                           
                                       
                                       
                                       
                                       
                                       
                              ),
                 tabPanel("Summary Stats",
                                       
                                   br(),    
      HTML("<h3 class='underlinestyle'>Summary Statistics<h4>"),
      br(),
      
      #HTML("<h1 class='hellothere font-168856 font-444086 fontStuff'>Hello there.</h1>
      #<h1 class='partner font-168856 font-444086 fontStuff'>Your partner in digital.</h1>"),                   
      ##column(3,div(htmlOutput("box1")), style=boxStyle),
      #fluidRow(column(width = 7, wellPanel(tags$style(".well {background-color:#FFD166;}"), sliderInput("date_new3",
      #                                                                                                  label = "FILTER DATES:",
      #                                                                                                  value=c(as.POSIXct(Sys.Date()-7, tz = "UTC"),
      #                                                                                                                                                                                                                 as.POSIXct(Sys.Date(), tz = "UTC")),
      #                                                                                                  min = as.POSIXct(Sys.Date()-7, tz = "UTC"),
      #                                                                                                  max = as.POSIXct(Sys.Date(), tz = "UTC"),
      #                                                                                                  step = 1,
      #                                                                                                  timeFormat="%Y-%m-%d")))),
      
      
      
      
      
      sliderInput("date_new3",
                  label = "FILTER DATES:",
                  value=c(as.POSIXct(Sys.Date()-7, tz = "UTC"),
                  as.POSIXct(Sys.Date(), tz = "UTC")),
                  min = as.POSIXct(Sys.Date()-7, tz = "UTC"),
                  max = as.POSIXct(Sys.Date(), tz = "UTC"),
                  step = 1,
                  timeFormat="%Y-%m-%d"),
                                                                                                      
     # HTML("<div id='rcorners1'>
     #   <input type='range' min='1' max='100' value='50' class='slider' id='myRange'>
    #  </div>"),          
     #HTML("<form id='rcorners1'>
     #   <div class='form-group shiny-input-container'>
     #      <label class='control-label' for='bins'>Number of bins:</label>
     #      <input class='js-range-slider' id='bins' data-min='1' data-max='50' data-from='30'  data-step='1' data-grid='true' data-grid-num='9.8' data-grid-snap='false'  data-prettify-separator=',' data-prettify-enabled='true' data-keyboard=
     #     'true'  data-keyboard-step='2.04081632653061' data-data-type='number'/>
     #      </div>
     #     </form>"),             
      
      br(),
      br(),
               
      
   

                          
                                    showDTdataUI(id="testDTModule"),  #show table of results
                                    br(),
                                      
                                    tableOutput("table2"),
                                    br(),
             
          #HTML("<h5>What do these table metrics show?</h5>"),
          HTML("<h3 class='underlinestyle'>What do these table metrics show?</h4>"),       
          br(),
             HTML( "  
          <ul>
          <li>Q1 - denotes the first quartile, one quarter of the data fall below this value</li>
          <li> Median - denotes the midpoint of a data set, half of the values are less than the median, and half are higher </li>
          <li>Q3 - denotes the third quartile, three quarters of the data fall below this value</li>
          
          </ul>
           <br> 
            NB: Please note that the times used in this app are marked by Universal Time Coordinated (UTC) - this is 0 hours 
                ahead of Greenwich Mean Time and 1 hour behind BST (British Summer Time).       
                   "
                   
             ),
             
        )
      
       )  
     )                               
                         
    
                   
          






server <- function(input, output, session) {
  
  
  
  
  
quake_data  <- 
    
      reactive({
      
      # Re-execute this reactive expression after 180000 milliseconds/three minutes
      invalidateLater(180000, session)
      
      url <- ("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.csv")
      
      all_day_quakes <- read.csv(url)
      
      
      #apply time filtering
      quake_data<-all_day_quakes%>%filter(time >=input$sliderdate[1] & time<=input$sliderdate[2])
      
      
    })
  
  
  
  
  
  
  output$table2<-renderTable({
    
    newdata <- quake_data3()
    
    newdata <- select(newdata, time, place, magnitude= mag, depth,
                    type) 
    
    
    #round numeric variables
    newdata<-newdata%>%mutate_if(is.numeric, round, 2)
    newdata<-newdata%>%filter(!is.na(depth)) %>%
      select(time,place,magnitude)%>% 
      summarize(MinMag=min(magnitude, na.rm=TRUE),
                Q1=quantile(magnitude, probs=0.25),
                MedianMag=median(magnitude, na.rm=TRUE),
                Q3=quantile(magnitude, probs=0.75),
                MaxMag=max(magnitude, na.rm=TRUE)
                )
    
    
    data.frame(newdata)
    })

  
  
  quake_data3 <- reactive({
    
    # Re-execute this reactive expression after 180000 milliseconds/three minutes
    invalidateLater(180000, session)
    
    url3 <- ("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.csv")
    
    all_day_quakes3 <- read.csv(url3)
    
    
    quake_data3<-all_day_quakes3%>%filter(time >=input$date_new3[1] & time<=input$date_new3[2])
    
    
  })
  
  
  
  
  
  
  
  quake_data2 <- reactive({
    
    
    #Re-execute this reactive expression after 180000 milliseconds/three minutes
    invalidateLater(180000, session)
    
    url2 <- ("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.csv")
    
    all_day_quakes2 <- read.csv(url2)
    
    
    quake_data2<-all_day_quakes2%>%filter(time >=input$date_new[1] & time<=input$date_new[2])
    
    
  })
  
  
  
  #call leaflet creation module
  drawleafletServer(id="MAIN_MAP",quake_data)
  
  
  #obtain basic stats
  STATS_server(id="BasicStats", quake_data=quake_data)
  

  #ECHART plot
  ECHART_server(id="ECHARTIE", quake_data2=quake_data2)
  
  
  
  #show metrics in a table
  DT_server(id="testDTModule", quake_data3)
  

}


shinyApp(ui = ui, server = server)  










                  
                         
    
                   
          




    

    
    
    
  
  
  


